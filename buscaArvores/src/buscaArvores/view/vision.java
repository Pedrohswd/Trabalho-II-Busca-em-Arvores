/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package buscaArvores.view;

import buscaArvores.SearchResult.SearchResult;
import buscaArvores.structure.Binary;
import buscaArvores.structure.NotTree;
import buscaArvores.structure.Tree;
import buscaArvores.structure.TreePanel;
import buscaArvores.util.QuickSort;
import buscaArvores.util.TextFileProcessor;
import java.io.File;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author aluno
 */
public class vision extends javax.swing.JFrame {

    Tree tree = new Tree();
    NotTree notTree = new NotTree();

    /**
     * Creates new form vision
     */
    public vision() {
        initComponents();
        setLocationRelativeTo(null);
        jTextField1.setEditable(false);
        jTextArea2.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jButtonImport = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jButtonGenerate = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTableOcorrencias = new javax.swing.JTable();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButtonImport.setText("Importar");
        jButtonImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonImportActionPerformed(evt);
            }
        });

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane3.setViewportView(jTextArea2);

        jButtonGenerate.setText("Gerar");
        jButtonGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGenerateActionPerformed(evt);
            }
        });

        jButton3.setText("Visualizar Árvores");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTableOcorrencias.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTableOcorrencias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Palavra", "Frequencia"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTableOcorrencias.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTableOcorrencias.setGridColor(new java.awt.Color(0, 0, 0));
        jTableOcorrencias.setRowHeight(50);
        jTableOcorrencias.setShowGrid(true);
        jTableOcorrencias.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableOcorrenciasMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(jTableOcorrencias);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(89, 89, 89)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(jButtonImport, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonGenerate, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(277, 277, 277)
                        .addComponent(jButton3)))
                .addContainerGap(53, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonImport, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonGenerate, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonImportActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fc.showOpenDialog(this);
        File arquivo = fc.getSelectedFile();

        jTextField1.setText(arquivo + "");
    }//GEN-LAST:event_jButtonImportActionPerformed

    private void jButtonGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGenerateActionPerformed
        jTextArea2.setText("");
        Set<SearchResult> searchResults = new HashSet<>();
        TextFileProcessor tFProcessor = new TextFileProcessor();
        String caminho = jTextField1.getText();
        if ("null".equals(caminho) || jTextField1.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Escolha um arquivo primeiro");
            return;
        }
        List<String> wordList = tFProcessor.verification(jTextField1.getText());

        //binária
        String[] array = tFProcessor.listToArray(wordList);
        QuickSort quickSort = new QuickSort();
        Binary binary = new Binary();
        long ti, tf;
        long ni, nf;
        double tt, nt;
        int comparacoes = 0;
        Set<String> foundWords = new HashSet<>();
        ti = System.nanoTime();
        ni = System.nanoTime();
        quickSort.quickSort(array);
        for (String word : wordList) {
            if (!foundWords.contains(word)) {
                SearchResult searchResult = binary.binarySearchCount(array, word);
                comparacoes += searchResult.getComparisons();
                searchResult.setWord(word);
                searchResult.setOccurrences(1);
                searchResults.add(searchResult);
                foundWords.add(word);
            } else {
                Iterator<SearchResult> iterator = searchResults.iterator();
                while (iterator.hasNext()) {
                    SearchResult elemento = iterator.next();
                    String compare = elemento.getWord();
                    if (compare.equals(word)) {
                        elemento.setOccurrences(elemento.getOccurrences() + 1);
                    }
                }
            }
        }
        tf = System.nanoTime();
        nf = System.nanoTime();
        tt = (tf - ti) / 1000000000.0;
        nt = nf - ni;
        String segundosFormatados = String.format("%.8f", tt);
        String milisegundosFormatados = String.format("%.2f", nt);
        String saida = ("Busca Binária\n"
                + " Comparações: " + comparacoes + "\n"
                + " Segundos: " + segundosFormatados + "\n"
                + " Nanosegundos: " + milisegundosFormatados);
        ti = 0;
        ni = 0;
        tf = 0;
        nf = 0;

        //arvore sem balanceamento
        System.out.println("ARVORE SEM BALANCEAMENTO");
        List<String> listaArvores = tFProcessor.removerPalavrasRepetidas(wordList);
        notTree.readTxt(listaArvores);
        //notTree.print();
        comparacoes = 0;
        foundWords = new HashSet<>();
        ti = System.nanoTime();
        ni = System.nanoTime();
        for (String word : wordList) {
            if (!foundWords.contains(word)) {
                SearchResult searchResult = notTree.searchAlphabetical(word);
                comparacoes += searchResult.getComparisons();
                foundWords.add(word);
            }
        }
        System.out.println("COMPARAÇÕES: " + comparacoes);
        tf = System.nanoTime();
        nf = System.nanoTime();
        tt = (tf - ti) / 1000000000.0;
        nt = nf - ni;
        segundosFormatados = String.format("%.8f", tt);
        milisegundosFormatados = String.format("%.2f", nt);
        saida += ("\n\nBusca Arvore\n"
                + " Comparações: " + comparacoes + "\n"
                + " Segundos: " + segundosFormatados + "\n"
                + " Nanosegundos: " + milisegundosFormatados);
        ti = 0;
        ni = 0;
        tf = 0;
        nf = 0;

        //arvore AVL
        listaArvores = tFProcessor.removerPalavrasRepetidas(wordList);
        tree.readTxt(listaArvores);
        tree.print();
        comparacoes = 0;
        foundWords = new HashSet<>();
        ti = System.nanoTime();
        ni = System.nanoTime();
        for (String word : wordList) {
            if (!foundWords.contains(word)) {
                SearchResult searchResult = tree.searchAlphabetical(word);
                comparacoes += searchResult.getComparisons();
                foundWords.add(word);
            }
        }
        System.out.println("COMPARAÇÕES: " + comparacoes);
        tf = System.nanoTime();
        nf = System.nanoTime();
        tt = (tf - ti) / 1000000000.0;
        nt = nf - ni;
        segundosFormatados = String.format("%.8f", tt);
        milisegundosFormatados = String.format("%.2f", nt);
        saida += ("\n\nBusca Arvore AVL\n"
                + " Comparações: " + comparacoes + "\n"
                + " Segundos: " + segundosFormatados + "\n"
                + " Nanosegundos: " + milisegundosFormatados);
        DefaultTableModel model = (DefaultTableModel) jTableOcorrencias.getModel();
        jTextArea2.setText(saida);
        model.setRowCount(0);
        for (SearchResult sr : searchResults) {
            model.addRow(new Object[]{
                sr.getWord(),
                sr.getOccurrences()
            });
        }
    }//GEN-LAST:event_jButtonGenerateActionPerformed

    private void jTableOcorrenciasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableOcorrenciasMouseClicked

    }//GEN-LAST:event_jTableOcorrenciasMouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        visionTree viTree = new visionTree(tree, notTree);
        viTree.setVisible(true);
        setVisible(false);
        SwingUtilities.invokeLater(() -> {
            Tree.Node root = tree.getRoot();
            TreePanel treePanel = new TreePanel(root);
            JFrame frame = new JFrame("Árvore AVL Alfabética");
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            frame.add(treePanel);
            frame.setSize(1920, 1080);
            frame.setVisible(true);
            frame.setLocationRelativeTo(null);
        });
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(vision.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(vision.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(vision.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(vision.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new vision().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButtonGenerate;
    private javax.swing.JButton jButtonImport;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTableOcorrencias;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
